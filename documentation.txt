book.py

Класс Book представляет собой книгу с атрибутами, такими как название, автор, год издания и статус. Включает методы для установки статуса книги и создания нового объекта книги с проверкой корректности введенных данных.

Атрибуты
id (int): Уникальный идентификатор для каждого экземпляра книги. Присваивается и увеличивается автоматически.
title (str): Название книги.
author (str): Автор книги.
year (int): Год издания книги.
status (str): Статус книги, который может быть либо "в наличии", либо "выдана".
Методы
init(self, title: str, author: str, year: int, status: str) -> None
Инициализирует новый экземпляр книги.

Параметры:
title (str): Название книги.
author (str): Автор книги.
year (int): Год издания книги.
status (str): Статус книги.
status_book(status: int) -> str
Возвращает строковое представление статуса книги.

Параметры:
status (int): Статус книги, где 1 - "в наличии", 2 - "выдана".
Возвращает:
(str): Строковое представление статуса книги, либо False, если статус некорректен.
set_book(title: str, author: str, year: int, status: int) -> Union[Book, bool]
Создает новый экземпляр книги после проверки корректности введенных данных.

Параметры:
title (str): Название книги.
author (str): Автор книги.
year (int): Год издания книги.
status (int): Статус книги, где 1 - "в наличии", 2 - "выдана".
Возвращает:
(Book): Новый экземпляр класса Book, если все данные корректны.
(bool): False, если данные некорректны (например, пустые поля, некорректный год или статус).


library.py

Класс Library управляет коллекцией книг, позволяя добавлять, удалять, изменять статус, искать и отображать книги. Данные хранятся в JSON-файле.

Атрибуты
library (dict): Словарь, содержащий книги с уникальными идентификаторами в качестве ключей.
filename (str): Имя файла, в котором хранятся данные библиотеки. По умолчанию "app/library.json".
Методы
init(self, filename="app/library.json") -> None
Инициализирует экземпляр библиотеки и считывает данные из указанного файла.

Параметры:
filename (str): Имя файла для хранения данных библиотеки. По умолчанию "app/library.json".
check_id(self, id: int) -> bool
Проверяет наличие книги с указанным ID в библиотеке.

Параметры:
id (int): Идентификатор книги.
Возвращает:
(bool): True, если книга с указанным ID существует, иначе False.
read_books(self) -> None
Считывает данные из файла и загружает их в библиотеку. Обновляет счетчик идентификаторов книг.

add_book(self, title: str, author: str, year: int, status: int) -> bool
Добавляет новую книгу в библиотеку и сохраняет изменения в файл.

Параметры:
title (str): Название книги.
author (str): Автор книги.
year (int): Год издания книги.
status (int): Статус книги (1 - "в наличии", 2 - "выдана").
Возвращает:
(bool): True, если книга успешно добавлена, иначе False.
save_books(self) -> None
Сохраняет текущие данные библиотеки в файл.

delete_book(self, id: int) -> bool
Удаляет книгу с указанным ID из библиотеки и сохраняет изменения в файл.

Параметры:
id (int): Идентификатор книги.
Возвращает:
(bool): True, если книга успешно удалена, иначе False.
search_book(self, title: str = "", author: str = "", year: str = "", show: bool = False) -> bool
Ищет книги по заданным параметрам и, если найдено, может отобразить их.

Параметры:
title (str): Название книги (по умолчанию пустая строка).
author (str): Автор книги (по умолчанию пустая строка).
year (str): Год издания книги (по умолчанию пустая строка).
show (bool): Флаг для отображения найденных книг (по умолчанию False).
Возвращает:
(bool): True, если книги найдены, иначе False.
change_books_status(self, id: int, new_value: str) -> bool
Изменяет статус книги с указанным ID и сохраняет изменения в файл.

Параметры:
id (int): Идентификатор книги.
new_value (str): Новый статус книги (1 - "в наличии", 2 - "выдана").
Возвращает:
(bool): True, если статус успешно изменен, иначе False.
table(self, d: dict = None) -> None
Выводит таблицу с данными книг. Если словарь d не указан, выводит все книги из библиотеки.

Параметры:
d (dict): Словарь с данными книг для отображения (по умолчанию None).
list_book(self) -> None
Выводит список всех книг в библиотеке.


consoleApp.py

Класс ConsoleApp предоставляет интерфейс командной строки для управления библиотекой книг, позволяя добавлять, удалять, изменять статус, искать и отображать книги. Он взаимодействует с классом Library для выполнения операций с книгами.

Атрибуты
MESSAGE (str): Сообщение, выводимое при возвращении в главное меню.
START_APP_MENU (list): Список пунктов главного меню приложения.
_library (Library): Экземпляр класса Library для управления книгами.
_switch (dict): Словарь, сопоставляющий номера пунктов меню с соответствующими методами класса.
Методы
init(self) -> None
Инициализирует экземпляр консольного приложения и создает экземпляр библиотеки.

back_to_menu(self) -> None
Возвращает пользователя в главное меню после нажатия любой клавиши и очищает экран.

validator(self, min_key: int, max_key: int, input_message: str = "Введите номер : ") -> int
Проверяет корректность ввода номера пункта меню и возвращает его, если он в заданном диапазоне.

Параметры:
min_key (int): Минимально допустимое значение.
max_key (int): Максимально допустимое значение.
input_message (str): Сообщение для запроса ввода. По умолчанию "Введите номер : ".
Возвращает:
(int): Введенное значение, если оно корректно.
start_app(self) -> None
Отображает главное меню приложения и обрабатывает ввод пользователя для выбора пункта меню.

choose_link(self, num: int) -> None
Вызывает соответствующий метод в зависимости от выбранного пункта меню.

Параметры:
num (int): Номер выбранного пункта меню.
add_book_page(self) -> None
Отображает страницу добавления книги, запрашивает у пользователя данные о книге и добавляет её в библиотеку.

del_book_page(self) -> None
Отображает страницу удаления книги, выводит список всех книг, запрашивает ID книги и удаляет её из библиотеки.

list_book_page(self) -> None
Отображает страницу со списком всех книг в библиотеке.

search_book_page(self) -> None
Отображает страницу поиска книги, запрашивает у пользователя параметры поиска и выводит результаты.

change_status_page(self) -> None
Отображает страницу изменения статуса книги, выводит список всех книг, запрашивает ID книги и новый статус, изменяет статус книги.

test.py

Класс TestBook предоставляет набор тестов для проверки функциональности класса Library с использованием модуля unittest.

Методы
setUp(self) -> None
Метод, который выполняется перед каждым тестом. Создает экземпляр библиотеки для тестирования.

test_add_book(self) -> None
Тестирует метод add_book класса Library.

Проверяет, добавляется ли корректная книга с правильными данными.
Проверяет, что некорректные данные (пустые поля, некорректный статус, год из будущего) не позволяют добавить книгу.
test_del_book(self) -> None
Тестирует метод delete_book класса Library.

Проверяет, что книга с некорректным идентификатором (отрицательным или нулевым) не удаляется.
Примечание: В тесте закомментирована проверка на успешное удаление книги, которая должна быть раскомментирована при наличии соответствующей книги в библиотеке.
test_search_book(self) -> None
Тестирует метод search_book класса Library.

Проверяет, что поиск книги по названию работает корректно.
Проверяет, что поиск без указания параметров не возвращает результаты.
Проверяет, что поиск книги по году издания работает корректно.
test_change_status(self) -> None
Тестирует метод change_books_status класса Library.

Проверяет, что изменение статуса книги с некорректным идентификатором (нулевым или отрицательным) не работает.
Проверяет, что изменение статуса книги на некорректное значение не работает.
books.py :

Класс Book
Класс Book представляет книгу и содержит следующие атрибуты:

id (int): Уникальный идентификатор книги. Присваивается автоматически при создании экземпляра класса.
title (str): Название книги.
author (str): Автор книги.
year (int): Год издания книги.
status (str): Статус книги (например, "в наличии", "выдана").
Атрибуты класса:
_id_counter (int): Счетчик для автоматического присвоения идентификаторов книгам. Инициализируется значением 1.
Методы класса:
__init__(self, title: str, author: str, year: int, status: str) -> None: Инициализирует новый экземпляр класса Book с заданными значениями атрибутов и присваивает уникальный идентификатор.
Класс Library
Класс Library представляет библиотеку, содержащую книги. Он управляет добавлением, удалением, изменением статуса книг и поиском по библиотеке.

Атрибуты класса:
library (dict): Словарь, содержащий все книги в библиотеке. Ключами являются уникальные идентификаторы книг, значениями — словари с информацией о книгах.
filename (str): Имя файла, используемого для сохранения данных библиотеки в формате JSON.
Методы класса:
__init__(self, filename="library.json") -> None
Инициализирует новый экземпляр класса Library и загружает книги из файла, если он существует.

check_id(self, id: int)
Проверяет наличие книги с заданным идентификатором в библиотеке.

Параметры: id (int) — Идентификатор книги.
Возвращает: True, если книга с данным идентификатором существует, False в противном случае.
read_books(self)
Считывает книги из файла и загружает их в библиотеку. Если файл существует, данные из него добавляются в библиотеку.

add_book(self, value: Book)
Добавляет новую книгу в библиотеку и сохраняет изменения в файл.

Параметры: value (Book) — Экземпляр класса Book, представляющий новую книгу.
save_books(self)
Сохраняет текущие данные библиотеки в файл в формате JSON.

delete_book(self, id: int)
Удаляет книгу с заданным идентификатором из библиотеки и сохраняет изменения в файл.

Параметры: id (int) — Идентификатор книги, которую нужно удалить.
search_book(self, title="", author="", year="")
Ищет книги в библиотеке по заданным критериям (название, автор, год).

Параметры:
title (str) — Название книги (необязательный).
author (str) — Автор книги (необязательный).
year (str) — Год издания книги (необязательный).
Возвращает: Список словарей с информацией о найденных книгах.
change_books_status(self, id: int, new_value: str)
Изменяет статус книги с заданным идентификатором и сохраняет изменения в файл.

Параметры:
id (int) — Идентификатор книги.
new_value (str) — Новый статус книги.
list_book(self)
Выводит список всех книг в библиотеке в табличном формате.

consoleApp.py

Класс ConsoleApp
Класс ConsoleApp представляет собой консольное приложение для управления библиотекой книг. Он предоставляет интерфейс для добавления, удаления, поиска и изменения статуса книг, а также для отображения всех книг в библиотеке.

Атрибуты класса
_MESSAGE (str): Сообщение, отображаемое при возврате в главное меню.
_START_APP_MENU (list): Список строк, представляющих пункты главного меню приложения.
Методы класса
__init__(self) -> None
Инициализирует новый экземпляр класса ConsoleApp. Создает объект библиотеки и словарь _switch, который связывает номера меню с соответствующими методами.

back_to_menu(self) -> None
Возвращает пользователя в главное меню после выполнения какой-либо операции. Ожидает нажатия любой клавиши и очищает экран.

validator(self, min_key: int, max_key: int, input_message: str = "Введите номер : ") -> int
Проверяет корректность ввода пользователя. Запрашивает ввод числа и проверяет, чтобы оно находилось в заданном диапазоне.

Параметры:
min_key (int): Минимальное допустимое значение.
max_key (int): Максимальное допустимое значение.
input_message (str): Сообщение, выводимое при запросе ввода.
Возвращает: Корректное введенное значение.
start_app(self) -> None
Отображает главное меню и обрабатывает выбор пользователя.

choose_link(self, num: int) -> None
Вызывает метод, соответствующий выбранному пункту главного меню.

Параметры:
num (int): Номер выбранного пункта меню.
add_book_page(self) -> None
Отображает страницу добавления книги. Запрашивает у пользователя информацию о книге и добавляет ее в библиотеку.

del_book_page(self) -> None
Отображает страницу удаления книги. Показывает список всех книг и запрашивает у пользователя идентификатор книги для удаления.

list_book_page(self) -> None
Отображает список всех книг в библиотеке.

search_book_page(self) -> None
Отображает страницу поиска книги. Запрашивает у пользователя критерии поиска и выводит найденные книги.

change_status_page(self) -> None
Отображает страницу изменения статуса книги. Показывает список всех книг и запрашивает у пользователя идентификатор книги и новый статус.